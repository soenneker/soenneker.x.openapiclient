// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Metrics : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Tracks number of App Install Attempts</summary>
        public int? AppInstallAttempts { get; set; }
        /// <summary>Tracks number of App opens</summary>
        public int? AppOpens { get; set; }
        /// <summary>Tracks number of Detail expands</summary>
        public int? DetailExpands { get; set; }
        /// <summary>Tracks number of Email Tweet actions</summary>
        public int? EmailTweet { get; set; }
        /// <summary>Tracks total Engagements</summary>
        public int? Engagements { get; set; }
        /// <summary>Tracks number of Follows</summary>
        public int? Follows { get; set; }
        /// <summary>Tracks number of Hashtag clicks</summary>
        public int? HashtagClicks { get; set; }
        /// <summary>Tracks number of Impressions</summary>
        public int? Impressions { get; set; }
        /// <summary>Tracks number of Likes</summary>
        public int? Likes { get; set; }
        /// <summary>Tracks number of Link clicks</summary>
        public int? LinkClicks { get; set; }
        /// <summary>Tracks number of Media engagements</summary>
        public int? MediaEngagements { get; set; }
        /// <summary>Tracks number of Media views</summary>
        public int? MediaViews { get; set; }
        /// <summary>Tracks number of Permalink clicks</summary>
        public int? PermalinkClicks { get; set; }
        /// <summary>Tracks number of Profile visits</summary>
        public int? ProfileVisits { get; set; }
        /// <summary>Tracks number of Quote Tweets</summary>
        public int? QuoteTweets { get; set; }
        /// <summary>Tracks number of Replies</summary>
        public int? Replies { get; set; }
        /// <summary>Tracks number of Retweets</summary>
        public int? Retweets { get; set; }
        /// <summary>Tracks number of URL clicks</summary>
        public int? UrlClicks { get; set; }
        /// <summary>Tracks number of User Profile clicks</summary>
        public int? UserProfileClicks { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Metrics"/> and sets the default values.
        /// </summary>
        public Metrics()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Metrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Metrics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Metrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "app_install_attempts", n => { AppInstallAttempts = n.GetIntValue(); } },
                { "app_opens", n => { AppOpens = n.GetIntValue(); } },
                { "detail_expands", n => { DetailExpands = n.GetIntValue(); } },
                { "email_tweet", n => { EmailTweet = n.GetIntValue(); } },
                { "engagements", n => { Engagements = n.GetIntValue(); } },
                { "follows", n => { Follows = n.GetIntValue(); } },
                { "hashtag_clicks", n => { HashtagClicks = n.GetIntValue(); } },
                { "impressions", n => { Impressions = n.GetIntValue(); } },
                { "likes", n => { Likes = n.GetIntValue(); } },
                { "link_clicks", n => { LinkClicks = n.GetIntValue(); } },
                { "media_engagements", n => { MediaEngagements = n.GetIntValue(); } },
                { "media_views", n => { MediaViews = n.GetIntValue(); } },
                { "permalink_clicks", n => { PermalinkClicks = n.GetIntValue(); } },
                { "profile_visits", n => { ProfileVisits = n.GetIntValue(); } },
                { "quote_tweets", n => { QuoteTweets = n.GetIntValue(); } },
                { "replies", n => { Replies = n.GetIntValue(); } },
                { "retweets", n => { Retweets = n.GetIntValue(); } },
                { "url_clicks", n => { UrlClicks = n.GetIntValue(); } },
                { "user_profile_clicks", n => { UserProfileClicks = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("app_install_attempts", AppInstallAttempts);
            writer.WriteIntValue("app_opens", AppOpens);
            writer.WriteIntValue("detail_expands", DetailExpands);
            writer.WriteIntValue("email_tweet", EmailTweet);
            writer.WriteIntValue("engagements", Engagements);
            writer.WriteIntValue("follows", Follows);
            writer.WriteIntValue("hashtag_clicks", HashtagClicks);
            writer.WriteIntValue("impressions", Impressions);
            writer.WriteIntValue("likes", Likes);
            writer.WriteIntValue("link_clicks", LinkClicks);
            writer.WriteIntValue("media_engagements", MediaEngagements);
            writer.WriteIntValue("media_views", MediaViews);
            writer.WriteIntValue("permalink_clicks", PermalinkClicks);
            writer.WriteIntValue("profile_visits", ProfileVisits);
            writer.WriteIntValue("quote_tweets", QuoteTweets);
            writer.WriteIntValue("replies", Replies);
            writer.WriteIntValue("retweets", Retweets);
            writer.WriteIntValue("url_clicks", UrlClicks);
            writer.WriteIntValue("user_profile_clicks", UserProfileClicks);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
