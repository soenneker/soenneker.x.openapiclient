// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CreateNoteRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A X Community Note is a note on a Post.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.NoteInfo? Info { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.NoteInfo Info { get; set; }
#endif
        /// <summary>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostId { get; set; }
#nullable restore
#else
        public string PostId { get; set; }
#endif
        /// <summary>If true, the note being submitted is only for testing the capability of the bot, and won&apos;t be publicly visible. If false, the note being submitted will be a new proposed note on the product.</summary>
        public bool? TestMode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.CreateNoteRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.CreateNoteRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.CreateNoteRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "info", n => { Info = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteInfo>(global::Soenneker.X.OpenApiClient.Models.NoteInfo.CreateFromDiscriminatorValue); } },
                { "post_id", n => { PostId = n.GetStringValue(); } },
                { "test_mode", n => { TestMode = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteInfo>("info", Info);
            writer.WriteStringValue("post_id", PostId);
            writer.WriteBoolValue("test_mode", TestMode);
        }
    }
}
#pragma warning restore CS0618
