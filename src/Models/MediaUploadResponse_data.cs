// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaUploadResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of seconds after which upload session expires.</summary>
        public int? ExpiresAfterSecs { get; set; }
        /// <summary>The unique identifier of this Media.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The Media Key identifier for this attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaKey { get; set; }
#nullable restore
#else
        public string MediaKey { get; set; }
#endif
        /// <summary>The processing_info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.ProcessingInfo? ProcessingInfo { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.ProcessingInfo ProcessingInfo { get; set; }
#endif
        /// <summary>Size of the upload</summary>
        public int? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.MediaUploadResponse_data"/> and sets the default values.
        /// </summary>
        public MediaUploadResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.MediaUploadResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.MediaUploadResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.MediaUploadResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "expires_after_secs", n => { ExpiresAfterSecs = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "media_key", n => { MediaKey = n.GetStringValue(); } },
                { "processing_info", n => { ProcessingInfo = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.ProcessingInfo>(global::Soenneker.X.OpenApiClient.Models.ProcessingInfo.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("expires_after_secs", ExpiresAfterSecs);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("media_key", MediaKey);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.ProcessingInfo>("processing_info", ProcessingInfo);
            writer.WriteIntValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
