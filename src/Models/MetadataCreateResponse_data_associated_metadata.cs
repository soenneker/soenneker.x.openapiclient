// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MetadataCreateResponse_data_associated_metadata : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allow_download_status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.AllowDownloadStatus? AllowDownloadStatus { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.AllowDownloadStatus AllowDownloadStatus { get; set; }
#endif
        /// <summary>The alt_text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.AltText? AltText { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.AltText AltText { get; set; }
#endif
        /// <summary>The audience_policy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.AudiencePolicy? AudiencePolicy { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.AudiencePolicy AudiencePolicy { get; set; }
#endif
        /// <summary>The content_expiration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.ContentExpiration? ContentExpiration { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.ContentExpiration ContentExpiration { get; set; }
#endif
        /// <summary>The domain_restrictions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.DomainRestrictions? DomainRestrictions { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.DomainRestrictions DomainRestrictions { get; set; }
#endif
        /// <summary>The found_media_origin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.FoundMediaOrigin? FoundMediaOrigin { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.FoundMediaOrigin FoundMediaOrigin { get; set; }
#endif
        /// <summary>The geo_restrictions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.GeoRestrictions? GeoRestrictions { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.GeoRestrictions GeoRestrictions { get; set; }
#endif
        /// <summary>The management_info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.ManagementInfo? ManagementInfo { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.ManagementInfo ManagementInfo { get; set; }
#endif
        /// <summary>The preview_image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.PreviewImage? PreviewImage { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.PreviewImage PreviewImage { get; set; }
#endif
        /// <summary>The sensitive_media_warning property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.SensitiveMediaWarning? SensitiveMediaWarning { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.SensitiveMediaWarning SensitiveMediaWarning { get; set; }
#endif
        /// <summary>The shared_info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.SharedInfo? SharedInfo { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.SharedInfo SharedInfo { get; set; }
#endif
        /// <summary>The sticker_info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.StickerInfo? StickerInfo { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.StickerInfo StickerInfo { get; set; }
#endif
        /// <summary>The upload_source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.UploadSource? UploadSource { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.UploadSource UploadSource { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.MetadataCreateResponse_data_associated_metadata"/> and sets the default values.
        /// </summary>
        public MetadataCreateResponse_data_associated_metadata()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.MetadataCreateResponse_data_associated_metadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.MetadataCreateResponse_data_associated_metadata CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.MetadataCreateResponse_data_associated_metadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_download_status", n => { AllowDownloadStatus = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.AllowDownloadStatus>(global::Soenneker.X.OpenApiClient.Models.AllowDownloadStatus.CreateFromDiscriminatorValue); } },
                { "alt_text", n => { AltText = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.AltText>(global::Soenneker.X.OpenApiClient.Models.AltText.CreateFromDiscriminatorValue); } },
                { "audience_policy", n => { AudiencePolicy = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.AudiencePolicy>(global::Soenneker.X.OpenApiClient.Models.AudiencePolicy.CreateFromDiscriminatorValue); } },
                { "content_expiration", n => { ContentExpiration = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.ContentExpiration>(global::Soenneker.X.OpenApiClient.Models.ContentExpiration.CreateFromDiscriminatorValue); } },
                { "domain_restrictions", n => { DomainRestrictions = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.DomainRestrictions>(global::Soenneker.X.OpenApiClient.Models.DomainRestrictions.CreateFromDiscriminatorValue); } },
                { "found_media_origin", n => { FoundMediaOrigin = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.FoundMediaOrigin>(global::Soenneker.X.OpenApiClient.Models.FoundMediaOrigin.CreateFromDiscriminatorValue); } },
                { "geo_restrictions", n => { GeoRestrictions = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.GeoRestrictions>(global::Soenneker.X.OpenApiClient.Models.GeoRestrictions.CreateFromDiscriminatorValue); } },
                { "management_info", n => { ManagementInfo = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.ManagementInfo>(global::Soenneker.X.OpenApiClient.Models.ManagementInfo.CreateFromDiscriminatorValue); } },
                { "preview_image", n => { PreviewImage = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.PreviewImage>(global::Soenneker.X.OpenApiClient.Models.PreviewImage.CreateFromDiscriminatorValue); } },
                { "sensitive_media_warning", n => { SensitiveMediaWarning = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.SensitiveMediaWarning>(global::Soenneker.X.OpenApiClient.Models.SensitiveMediaWarning.CreateFromDiscriminatorValue); } },
                { "shared_info", n => { SharedInfo = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.SharedInfo>(global::Soenneker.X.OpenApiClient.Models.SharedInfo.CreateFromDiscriminatorValue); } },
                { "sticker_info", n => { StickerInfo = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.StickerInfo>(global::Soenneker.X.OpenApiClient.Models.StickerInfo.CreateFromDiscriminatorValue); } },
                { "upload_source", n => { UploadSource = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.UploadSource>(global::Soenneker.X.OpenApiClient.Models.UploadSource.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.AllowDownloadStatus>("allow_download_status", AllowDownloadStatus);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.AltText>("alt_text", AltText);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.AudiencePolicy>("audience_policy", AudiencePolicy);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.ContentExpiration>("content_expiration", ContentExpiration);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.DomainRestrictions>("domain_restrictions", DomainRestrictions);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.FoundMediaOrigin>("found_media_origin", FoundMediaOrigin);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.GeoRestrictions>("geo_restrictions", GeoRestrictions);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.ManagementInfo>("management_info", ManagementInfo);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.PreviewImage>("preview_image", PreviewImage);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.SensitiveMediaWarning>("sensitive_media_warning", SensitiveMediaWarning);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.SharedInfo>("shared_info", SharedInfo);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.StickerInfo>("sticker_info", StickerInfo);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.UploadSource>("upload_source", UploadSource);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
