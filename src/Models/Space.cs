// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Space : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Creation time of the Space.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatorId { get; set; }
#nullable restore
#else
        public string CreatorId { get; set; }
#endif
        /// <summary>End time of the Space.</summary>
        public DateTimeOffset? EndedAt { get; set; }
        /// <summary>The user ids for the hosts of the Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? HostIds { get; set; }
#nullable restore
#else
        public List<string> HostIds { get; set; }
#endif
        /// <summary>The unique identifier of this Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>An array of user ids for people who were invited to a Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InvitedUserIds { get; set; }
#nullable restore
#else
        public List<string> InvitedUserIds { get; set; }
#endif
        /// <summary>Denotes if the Space is a ticketed Space.</summary>
        public bool? IsTicketed { get; set; }
        /// <summary>The language of the Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Lang { get; set; }
#nullable restore
#else
        public string Lang { get; set; }
#endif
        /// <summary>The number of participants in a Space.</summary>
        public int? ParticipantCount { get; set; }
        /// <summary>A date time stamp for when a Space is scheduled to begin.</summary>
        public DateTimeOffset? ScheduledStart { get; set; }
        /// <summary>An array of user ids for people who were speakers in a Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SpeakerIds { get; set; }
#nullable restore
#else
        public List<string> SpeakerIds { get; set; }
#endif
        /// <summary>When the Space was started as a date string.</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>The current state of the Space.</summary>
        public global::Soenneker.X.OpenApiClient.Models.Space_state? State { get; set; }
        /// <summary>The number of people who have either purchased a ticket or set a reminder for this Space.</summary>
        public int? SubscriberCount { get; set; }
        /// <summary>The title of the Space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The topics of a Space, as selected by its creator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Space_topics>? Topics { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Space_topics> Topics { get; set; }
#endif
        /// <summary>When the Space was last updated.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Space"/> and sets the default values.
        /// </summary>
        public Space()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Space"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Space CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Space();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "creator_id", n => { CreatorId = n.GetStringValue(); } },
                { "ended_at", n => { EndedAt = n.GetDateTimeOffsetValue(); } },
                { "host_ids", n => { HostIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invited_user_ids", n => { InvitedUserIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "is_ticketed", n => { IsTicketed = n.GetBoolValue(); } },
                { "lang", n => { Lang = n.GetStringValue(); } },
                { "participant_count", n => { ParticipantCount = n.GetIntValue(); } },
                { "scheduled_start", n => { ScheduledStart = n.GetDateTimeOffsetValue(); } },
                { "speaker_ids", n => { SpeakerIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "started_at", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "state", n => { State = n.GetEnumValue<global::Soenneker.X.OpenApiClient.Models.Space_state>(); } },
                { "subscriber_count", n => { SubscriberCount = n.GetIntValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "topics", n => { Topics = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Space_topics>(global::Soenneker.X.OpenApiClient.Models.Space_topics.CreateFromDiscriminatorValue)?.AsList(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("creator_id", CreatorId);
            writer.WriteDateTimeOffsetValue("ended_at", EndedAt);
            writer.WriteCollectionOfPrimitiveValues<string>("host_ids", HostIds);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfPrimitiveValues<string>("invited_user_ids", InvitedUserIds);
            writer.WriteBoolValue("is_ticketed", IsTicketed);
            writer.WriteStringValue("lang", Lang);
            writer.WriteIntValue("participant_count", ParticipantCount);
            writer.WriteDateTimeOffsetValue("scheduled_start", ScheduledStart);
            writer.WriteCollectionOfPrimitiveValues<string>("speaker_ids", SpeakerIds);
            writer.WriteDateTimeOffsetValue("started_at", StartedAt);
            writer.WriteEnumValue<global::Soenneker.X.OpenApiClient.Models.Space_state>("state", State);
            writer.WriteIntValue("subscriber_count", SubscriberCount);
            writer.WriteStringValue("title", Title);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Space_topics>("topics", Topics);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
