// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Sticker : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>width-to-height ratio of the media</summary>
        public double? AspectRatio { get; set; }
        /// <summary>A unique identifier for the group of annotations associated with the media</summary>
        public double? GroupAnnotationId { get; set; }
        /// <summary>Unique identifier for sticker</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>A unique identifier for the sticker set associated with the media</summary>
        public double? StickerSetAnnotationId { get; set; }
        /// <summary>Scale or rotate the media on the x-axis</summary>
        public double? TransformA { get; set; }
        /// <summary>Skew the media on the x-axis</summary>
        public double? TransformB { get; set; }
        /// <summary>Skew the media on the y-axis</summary>
        public double? TransformC { get; set; }
        /// <summary>Scale or rotate the media on the y-axis</summary>
        public double? TransformD { get; set; }
        /// <summary>Scale or rotate the media on the x-axis</summary>
        public double? TransformTx { get; set; }
        /// <summary>The vertical translation (shift) value for the media</summary>
        public double? TransformTy { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Sticker"/> and sets the default values.
        /// </summary>
        public Sticker()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Sticker"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Sticker CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Sticker();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aspect_ratio", n => { AspectRatio = n.GetDoubleValue(); } },
                { "group_annotation_id", n => { GroupAnnotationId = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "sticker_set_annotation_id", n => { StickerSetAnnotationId = n.GetDoubleValue(); } },
                { "transform_a", n => { TransformA = n.GetDoubleValue(); } },
                { "transform_b", n => { TransformB = n.GetDoubleValue(); } },
                { "transform_c", n => { TransformC = n.GetDoubleValue(); } },
                { "transform_d", n => { TransformD = n.GetDoubleValue(); } },
                { "transform_tx", n => { TransformTx = n.GetDoubleValue(); } },
                { "transform_ty", n => { TransformTy = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("aspect_ratio", AspectRatio);
            writer.WriteDoubleValue("group_annotation_id", GroupAnnotationId);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("sticker_set_annotation_id", StickerSetAnnotationId);
            writer.WriteDoubleValue("transform_a", TransformA);
            writer.WriteDoubleValue("transform_b", TransformB);
            writer.WriteDoubleValue("transform_c", TransformC);
            writer.WriteDoubleValue("transform_d", TransformD);
            writer.WriteDoubleValue("transform_tx", TransformTx);
            writer.WriteDoubleValue("transform_ty", TransformTy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
