// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    /// <summary>
    /// Organic nonpublic engagement metrics for the Media at the time of the request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Video_organic_metrics : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of users who made it through 0% of the video.</summary>
        public int? Playback0Count { get; set; }
        /// <summary>Number of users who made it through 100% of the video.</summary>
        public int? Playback100Count { get; set; }
        /// <summary>Number of users who made it through 25% of the video.</summary>
        public int? Playback25Count { get; set; }
        /// <summary>Number of users who made it through 50% of the video.</summary>
        public int? Playback50Count { get; set; }
        /// <summary>Number of users who made it through 75% of the video.</summary>
        public int? Playback75Count { get; set; }
        /// <summary>Number of times this video has been viewed.</summary>
        public int? ViewCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Video_organic_metrics"/> and sets the default values.
        /// </summary>
        public Video_organic_metrics()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Video_organic_metrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Video_organic_metrics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Video_organic_metrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "playback_0_count", n => { Playback0Count = n.GetIntValue(); } },
                { "playback_100_count", n => { Playback100Count = n.GetIntValue(); } },
                { "playback_25_count", n => { Playback25Count = n.GetIntValue(); } },
                { "playback_50_count", n => { Playback50Count = n.GetIntValue(); } },
                { "playback_75_count", n => { Playback75Count = n.GetIntValue(); } },
                { "view_count", n => { ViewCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("playback_0_count", Playback0Count);
            writer.WriteIntValue("playback_100_count", Playback100Count);
            writer.WriteIntValue("playback_25_count", Playback25Count);
            writer.WriteIntValue("playback_50_count", Playback50Count);
            writer.WriteIntValue("playback_75_count", Playback75Count);
            writer.WriteIntValue("view_count", ViewCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
