// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaMetrics : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Tracks the number of clicks on a call-to-action URL</summary>
        public int? CtaUrlClicks { get; set; }
        /// <summary>Tracks the number of clicks to watch a video or media content</summary>
        public int? CtaWatchClicks { get; set; }
        /// <summary>Tracks the number of times a video reaches 25% of its duration</summary>
        public int? Playback25 { get; set; }
        /// <summary>Tracks the number of times a video reaches 50% of its duration</summary>
        public int? Playback50 { get; set; }
        /// <summary>Tracks the number of times a video reaches 75% of its duration</summary>
        public int? Playback75 { get; set; }
        /// <summary>Tracks the number of times a video is played to completion</summary>
        public int? PlaybackComplete { get; set; }
        /// <summary>Tracks the number of times a video playback is initiated</summary>
        public int? PlaybackStart { get; set; }
        /// <summary>Tracks the number of times a video or media is played from a user tap</summary>
        public int? PlayFromTap { get; set; }
        /// <summary>Tracks the number of times a video is viewed</summary>
        public int? VideoViews { get; set; }
        /// <summary>Tracks the total time spent watching a video, measured in milliseconds</summary>
        public int? WatchTimeMs { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.MediaMetrics"/> and sets the default values.
        /// </summary>
        public MediaMetrics()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.MediaMetrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.MediaMetrics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.MediaMetrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cta_url_clicks", n => { CtaUrlClicks = n.GetIntValue(); } },
                { "cta_watch_clicks", n => { CtaWatchClicks = n.GetIntValue(); } },
                { "play_from_tap", n => { PlayFromTap = n.GetIntValue(); } },
                { "playback25", n => { Playback25 = n.GetIntValue(); } },
                { "playback50", n => { Playback50 = n.GetIntValue(); } },
                { "playback75", n => { Playback75 = n.GetIntValue(); } },
                { "playback_complete", n => { PlaybackComplete = n.GetIntValue(); } },
                { "playback_start", n => { PlaybackStart = n.GetIntValue(); } },
                { "video_views", n => { VideoViews = n.GetIntValue(); } },
                { "watch_time_ms", n => { WatchTimeMs = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("cta_url_clicks", CtaUrlClicks);
            writer.WriteIntValue("cta_watch_clicks", CtaWatchClicks);
            writer.WriteIntValue("playback25", Playback25);
            writer.WriteIntValue("playback50", Playback50);
            writer.WriteIntValue("playback75", Playback75);
            writer.WriteIntValue("playback_complete", PlaybackComplete);
            writer.WriteIntValue("playback_start", PlaybackStart);
            writer.WriteIntValue("play_from_tap", PlayFromTap);
            writer.WriteIntValue("video_views", VideoViews);
            writer.WriteIntValue("watch_time_ms", WatchTimeMs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
