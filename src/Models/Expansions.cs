// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Expansions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Media>? Media { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Media> Media { get; set; }
#endif
        /// <summary>The places property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Place>? Places { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Place> Places { get; set; }
#endif
        /// <summary>The polls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Poll>? Polls { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Poll> Polls { get; set; }
#endif
        /// <summary>The topics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Topic>? Topics { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Topic> Topics { get; set; }
#endif
        /// <summary>The tweets property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.Tweet>? Tweets { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.Tweet> Tweets { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.X.OpenApiClient.Models.User>? Users { get; set; }
#nullable restore
#else
        public List<global::Soenneker.X.OpenApiClient.Models.User> Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Expansions"/> and sets the default values.
        /// </summary>
        public Expansions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Expansions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Expansions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Expansions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "media", n => { Media = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Media>(global::Soenneker.X.OpenApiClient.Models.Media.CreateFromDiscriminatorValue)?.AsList(); } },
                { "places", n => { Places = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Place>(global::Soenneker.X.OpenApiClient.Models.Place.CreateFromDiscriminatorValue)?.AsList(); } },
                { "polls", n => { Polls = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Poll>(global::Soenneker.X.OpenApiClient.Models.Poll.CreateFromDiscriminatorValue)?.AsList(); } },
                { "topics", n => { Topics = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Topic>(global::Soenneker.X.OpenApiClient.Models.Topic.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tweets", n => { Tweets = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Tweet>(global::Soenneker.X.OpenApiClient.Models.Tweet.CreateFromDiscriminatorValue)?.AsList(); } },
                { "users", n => { Users = n.GetCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.User>(global::Soenneker.X.OpenApiClient.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Media>("media", Media);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Place>("places", Places);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Poll>("polls", Polls);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Topic>("topics", Topics);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.Tweet>("tweets", Tweets);
            writer.WriteCollectionOfObjectValues<global::Soenneker.X.OpenApiClient.Models.User>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
