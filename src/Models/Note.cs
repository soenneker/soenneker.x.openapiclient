// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    /// <summary>
    /// A X Community Note is a note on a Post.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Note : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The unique identifier of this Community Note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>A X Community Note is a note on a Post.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.NoteInfo? Info { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.NoteInfo Info { get; set; }
#endif
        /// <summary>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostId { get; set; }
#nullable restore
#else
        public string PostId { get; set; }
#endif
        /// <summary>Community Note rating status. Only returned when test result is false</summary>
        public global::Soenneker.X.OpenApiClient.Models.NoteRatingStatus? Status { get; set; }
        /// <summary>The test result of a community note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.NoteTestResult? TestResult { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.NoteTestResult TestResult { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Models.Note"/> and sets the default values.
        /// </summary>
        public Note()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Note"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.Note CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.Note();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "info", n => { Info = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteInfo>(global::Soenneker.X.OpenApiClient.Models.NoteInfo.CreateFromDiscriminatorValue); } },
                { "post_id", n => { PostId = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.X.OpenApiClient.Models.NoteRatingStatus>(); } },
                { "test_result", n => { TestResult = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteTestResult>(global::Soenneker.X.OpenApiClient.Models.NoteTestResult.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteInfo>("info", Info);
            writer.WriteStringValue("post_id", PostId);
            writer.WriteEnumValue<global::Soenneker.X.OpenApiClient.Models.NoteRatingStatus>("status", Status);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.NoteTestResult>("test_result", TestResult);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
