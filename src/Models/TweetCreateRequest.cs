// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.X.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TweetCreateRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardUri { get; set; }
#nullable restore
#else
        public string CardUri { get; set; }
#endif
        /// <summary>The unique identifier of this Community.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommunityId { get; set; }
#nullable restore
#else
        public string CommunityId { get; set; }
#endif
        /// <summary>Link to take the conversation from the public timeline to a private Direct Message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DirectMessageDeepLink { get; set; }
#nullable restore
#else
        public string DirectMessageDeepLink { get; set; }
#endif
        /// <summary>Options for editing an existing Post. When provided, this request will edit the specified Post instead of creating a new one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_edit_options? EditOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_edit_options EditOptions { get; set; }
#endif
        /// <summary>Exclusive Tweet for super followers.</summary>
        public bool? ForSuperFollowersOnly { get; set; }
        /// <summary>Place ID being attached to the Tweet for geo location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_geo? Geo { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_geo Geo { get; set; }
#endif
        /// <summary>Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_media? Media { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_media Media { get; set; }
#endif
        /// <summary>Nullcasted (promoted-only) Posts do not appear in the public timeline and are not served to followers.</summary>
        public bool? Nullcast { get; set; }
        /// <summary>Poll options for a Tweet with a poll. This is mutually exclusive from Media, Quote Tweet Id, and Card URI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_poll? Poll { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_poll Poll { get; set; }
#endif
        /// <summary>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QuoteTweetId { get; set; }
#nullable restore
#else
        public string QuoteTweetId { get; set; }
#endif
        /// <summary>Tweet information of the Tweet being replied to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply? Reply { get; set; }
#nullable restore
#else
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply Reply { get; set; }
#endif
        /// <summary>Settings to indicate who can reply to the Tweet.</summary>
        public global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply_settings? ReplySettings { get; set; }
        /// <summary>Share community post with followers too.</summary>
        public bool? ShareWithFollowers { get; set; }
        /// <summary>The content of the Tweet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_uri", n => { CardUri = n.GetStringValue(); } },
                { "community_id", n => { CommunityId = n.GetStringValue(); } },
                { "direct_message_deep_link", n => { DirectMessageDeepLink = n.GetStringValue(); } },
                { "edit_options", n => { EditOptions = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_edit_options>(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_edit_options.CreateFromDiscriminatorValue); } },
                { "for_super_followers_only", n => { ForSuperFollowersOnly = n.GetBoolValue(); } },
                { "geo", n => { Geo = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_geo>(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_geo.CreateFromDiscriminatorValue); } },
                { "media", n => { Media = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_media>(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_media.CreateFromDiscriminatorValue); } },
                { "nullcast", n => { Nullcast = n.GetBoolValue(); } },
                { "poll", n => { Poll = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_poll>(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_poll.CreateFromDiscriminatorValue); } },
                { "quote_tweet_id", n => { QuoteTweetId = n.GetStringValue(); } },
                { "reply", n => { Reply = n.GetObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply>(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply.CreateFromDiscriminatorValue); } },
                { "reply_settings", n => { ReplySettings = n.GetEnumValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply_settings>(); } },
                { "share_with_followers", n => { ShareWithFollowers = n.GetBoolValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("card_uri", CardUri);
            writer.WriteStringValue("community_id", CommunityId);
            writer.WriteStringValue("direct_message_deep_link", DirectMessageDeepLink);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_edit_options>("edit_options", EditOptions);
            writer.WriteBoolValue("for_super_followers_only", ForSuperFollowersOnly);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_geo>("geo", Geo);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_media>("media", Media);
            writer.WriteBoolValue("nullcast", Nullcast);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_poll>("poll", Poll);
            writer.WriteStringValue("quote_tweet_id", QuoteTweetId);
            writer.WriteObjectValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply>("reply", Reply);
            writer.WriteEnumValue<global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest_reply_settings>("reply_settings", ReplySettings);
            writer.WriteBoolValue("share_with_followers", ShareWithFollowers);
            writer.WriteStringValue("text", Text);
        }
    }
}
#pragma warning restore CS0618
