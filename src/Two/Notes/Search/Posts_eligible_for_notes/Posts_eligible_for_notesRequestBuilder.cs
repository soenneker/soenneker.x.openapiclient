// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.X.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes
{
    /// <summary>
    /// Builds and executes requests for operations under \2\notes\search\posts_eligible_for_notes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Posts_eligible_for_notesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Posts_eligible_for_notesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/notes/search/posts_eligible_for_notes?test_mode={test_mode}{&expansions,max_results*,media%2Efields,pagination_token*,place%2Efields,poll%2Efields,tweet%2Efields,user%2Efields}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Posts_eligible_for_notesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/notes/search/posts_eligible_for_notes?test_mode={test_mode}{&expansions,max_results*,media%2Efields,pagination_token*,place%2Efields,poll%2Efields,tweet%2Efields,user%2Efields}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all the posts that are eligible for community notes.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Get2NotesSearchPostsEligibleForNotesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.X.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.X.OpenApiClient.Models.Get2NotesSearchPostsEligibleForNotesResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder.Posts_eligible_for_notesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.X.OpenApiClient.Models.Get2NotesSearchPostsEligibleForNotesResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder.Posts_eligible_for_notesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.X.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.X.OpenApiClient.Models.Get2NotesSearchPostsEligibleForNotesResponse>(requestInfo, global::Soenneker.X.OpenApiClient.Models.Get2NotesSearchPostsEligibleForNotesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all the posts that are eligible for community notes.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder.Posts_eligible_for_notesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder.Posts_eligible_for_notesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.Posts_eligible_for_notesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all the posts that are eligible for community notes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Posts_eligible_for_notesRequestBuilderGetQueryParameters 
        {
            /// <summary>A comma separated list of fields to expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expansions")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetExpansionsQueryParameterType[]? Expansions { get; set; }
#nullable restore
#else
            [QueryParameter("expansions")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetExpansionsQueryParameterType[] Expansions { get; set; }
#endif
            /// <summary>Max results to return.</summary>
            [QueryParameter("max_results")]
            public int? MaxResults { get; set; }
            /// <summary>A comma separated list of Media fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("media%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetMediaFieldsQueryParameterType[]? MediaFields { get; set; }
#nullable restore
#else
            [QueryParameter("media%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetMediaFieldsQueryParameterType[] MediaFields { get; set; }
#endif
            /// <summary>Pagination token to get next set of posts eligible for notes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pagination_token")]
            public string? PaginationToken { get; set; }
#nullable restore
#else
            [QueryParameter("pagination_token")]
            public string PaginationToken { get; set; }
#endif
            /// <summary>A comma separated list of Place fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("place%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetPlaceFieldsQueryParameterType[]? PlaceFields { get; set; }
#nullable restore
#else
            [QueryParameter("place%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetPlaceFieldsQueryParameterType[] PlaceFields { get; set; }
#endif
            /// <summary>A comma separated list of Poll fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("poll%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetPollFieldsQueryParameterType[]? PollFields { get; set; }
#nullable restore
#else
            [QueryParameter("poll%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetPollFieldsQueryParameterType[] PollFields { get; set; }
#endif
            /// <summary>If true, return a list of posts that are for the test. If false, return a list of posts that the bots can write proposed notes on the product.</summary>
            [QueryParameter("test_mode")]
            public bool? TestMode { get; set; }
            /// <summary>A comma separated list of Tweet fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tweet%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetTweetFieldsQueryParameterType[]? TweetFields { get; set; }
#nullable restore
#else
            [QueryParameter("tweet%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetTweetFieldsQueryParameterType[] TweetFields { get; set; }
#endif
            /// <summary>A comma separated list of User fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("user%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetUserFieldsQueryParameterType[]? UserFields { get; set; }
#nullable restore
#else
            [QueryParameter("user%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Notes.Search.Posts_eligible_for_notes.GetUserFieldsQueryParameterType[] UserFields { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
