// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.X.OpenApiClient.Models;
using Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.Counts;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules
{
    /// <summary>
    /// Builds and executes requests for operations under \2\tweets\search\stream\rules
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RulesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The counts property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.Counts.CountsRequestBuilder Counts
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.Counts.CountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RulesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/tweets/search/stream/rules{?delete_all*,dry_run*,ids*,max_results*,pagination_token*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RulesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/tweets/search/stream/rules{?delete_all*,dry_run*,ids*,max_results*,pagination_token*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves the active rule set or a subset of rules for the filtered stream.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.RulesLookupResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.X.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.X.OpenApiClient.Models.RulesLookupResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.X.OpenApiClient.Models.RulesLookupResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.X.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.X.OpenApiClient.Models.RulesLookupResponse>(requestInfo, global::Soenneker.X.OpenApiClient.Models.RulesLookupResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Adds or deletes rules from the active rule set for the filtered stream.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.X.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesResponse?> PostAsync(global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesRequest body, Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesResponse> PostAsync(global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesRequest body, Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.X.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesResponse>(requestInfo, global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the active rule set or a subset of rules for the filtered stream.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Adds or deletes rules from the active rule set for the filtered stream.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesRequest body, Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.X.OpenApiClient.Models.AddOrDeleteRulesRequest body, Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder.RulesRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.X.OpenApiClient.Two.Tweets.Search.StreamNamespace.Rules.RulesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves the active rule set or a subset of rules for the filtered stream.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RulesRequestBuilderGetQueryParameters 
        {
            /// <summary>A comma-separated list of Rule IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ids")]
            public string[]? Ids { get; set; }
#nullable restore
#else
            [QueryParameter("ids")]
            public string[] Ids { get; set; }
#endif
            /// <summary>The maximum number of results.</summary>
            [QueryParameter("max_results")]
            public int? MaxResults { get; set; }
            /// <summary>This value is populated by passing the &apos;next_token&apos; returned in a request to paginate through results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pagination_token")]
            public string? PaginationToken { get; set; }
#nullable restore
#else
            [QueryParameter("pagination_token")]
            public string PaginationToken { get; set; }
#endif
        }
        /// <summary>
        /// Adds or deletes rules from the active rule set for the filtered stream.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RulesRequestBuilderPostQueryParameters 
        {
            /// <summary>Delete All can be used to delete all of the rules associated this client app, it should be specified with no other parameters. Once deleted, rules cannot be recovered.</summary>
            [QueryParameter("delete_all")]
            public bool? DeleteAll { get; set; }
            /// <summary>Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.</summary>
            [QueryParameter("dry_run")]
            public bool? DryRun { get; set; }
        }
    }
}
#pragma warning restore CS0618
