// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.X.OpenApiClient.Models;
using Soenneker.X.OpenApiClient.Two.Tweets.Analytics;
using Soenneker.X.OpenApiClient.Two.Tweets.Compliance;
using Soenneker.X.OpenApiClient.Two.Tweets.Counts;
using Soenneker.X.OpenApiClient.Two.Tweets.Firehose;
using Soenneker.X.OpenApiClient.Two.Tweets.Item;
using Soenneker.X.OpenApiClient.Two.Tweets.Label;
using Soenneker.X.OpenApiClient.Two.Tweets.Sample10;
using Soenneker.X.OpenApiClient.Two.Tweets.Sample;
using Soenneker.X.OpenApiClient.Two.Tweets.Search;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.X.OpenApiClient.Two.Tweets
{
    /// <summary>
    /// Builds and executes requests for operations under \2\tweets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TweetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The analytics property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Analytics.AnalyticsRequestBuilder Analytics
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Analytics.AnalyticsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The compliance property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Compliance.ComplianceRequestBuilder Compliance
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Compliance.ComplianceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The counts property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Counts.CountsRequestBuilder Counts
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Counts.CountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The firehose property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Firehose.FirehoseRequestBuilder Firehose
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Firehose.FirehoseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The label property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Label.LabelRequestBuilder Label
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Label.LabelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sample property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Sample.SampleRequestBuilder Sample
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Sample.SampleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sample10 property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Sample10.Sample10RequestBuilder Sample10
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Sample10.Sample10RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Search.SearchRequestBuilder Search
        {
            get => new global::Soenneker.X.OpenApiClient.Two.Tweets.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.X.OpenApiClient.Two.tweets.item collection</summary>
        /// <param name="position">The ID of the Post to be deleted.</param>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.Item.ItemRequestBuilder"/></returns>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.Item.ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::Soenneker.X.OpenApiClient.Two.Tweets.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TweetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/tweets?ids={ids}{&expansions,media%2Efields,place%2Efields,poll%2Efields,tweet%2Efields,user%2Efields}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TweetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/2/tweets?ids={ids}{&expansions,media%2Efields,place%2Efields,poll%2Efields,tweet%2Efields,user%2Efields}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves details of multiple Posts by their IDs.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.Get2TweetsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.X.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.X.OpenApiClient.Models.Get2TweetsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder.TweetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.X.OpenApiClient.Models.Get2TweetsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder.TweetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.X.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.X.OpenApiClient.Models.Get2TweetsResponse>(requestInfo, global::Soenneker.X.OpenApiClient.Models.Get2TweetsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new Post for the authenticated user.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Models.TweetCreateResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.X.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.X.OpenApiClient.Models.TweetCreateResponse?> PostAsync(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.X.OpenApiClient.Models.TweetCreateResponse> PostAsync(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.X.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.X.OpenApiClient.Models.TweetCreateResponse>(requestInfo, global::Soenneker.X.OpenApiClient.Models.TweetCreateResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves details of multiple Posts by their IDs.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder.TweetsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder.TweetsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new Post for the authenticated user.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.X.OpenApiClient.Models.TweetCreateRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/2/tweets", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.X.OpenApiClient.Two.Tweets.TweetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves details of multiple Posts by their IDs.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TweetsRequestBuilderGetQueryParameters 
        {
            /// <summary>A comma separated list of fields to expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expansions")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetExpansionsQueryParameterType[]? Expansions { get; set; }
#nullable restore
#else
            [QueryParameter("expansions")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetExpansionsQueryParameterType[] Expansions { get; set; }
#endif
            /// <summary>A comma separated list of Post IDs. Up to 100 are allowed in a single request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ids")]
            public string[]? Ids { get; set; }
#nullable restore
#else
            [QueryParameter("ids")]
            public string[] Ids { get; set; }
#endif
            /// <summary>A comma separated list of Media fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("media%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetMediaFieldsQueryParameterType[]? MediaFields { get; set; }
#nullable restore
#else
            [QueryParameter("media%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetMediaFieldsQueryParameterType[] MediaFields { get; set; }
#endif
            /// <summary>A comma separated list of Place fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("place%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetPlaceFieldsQueryParameterType[]? PlaceFields { get; set; }
#nullable restore
#else
            [QueryParameter("place%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetPlaceFieldsQueryParameterType[] PlaceFields { get; set; }
#endif
            /// <summary>A comma separated list of Poll fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("poll%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetPollFieldsQueryParameterType[]? PollFields { get; set; }
#nullable restore
#else
            [QueryParameter("poll%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetPollFieldsQueryParameterType[] PollFields { get; set; }
#endif
            /// <summary>A comma separated list of Tweet fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tweet%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetTweetFieldsQueryParameterType[]? TweetFields { get; set; }
#nullable restore
#else
            [QueryParameter("tweet%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetTweetFieldsQueryParameterType[] TweetFields { get; set; }
#endif
            /// <summary>A comma separated list of User fields to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("user%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetUserFieldsQueryParameterType[]? UserFields { get; set; }
#nullable restore
#else
            [QueryParameter("user%2Efields")]
            public global::Soenneker.X.OpenApiClient.Two.Tweets.GetUserFieldsQueryParameterType[] UserFields { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
